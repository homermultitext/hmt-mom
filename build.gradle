/* HMT project Mandatory Ongoing Maintenance. Summer 2014 version.
*/
buildscript {
    repositories {
        mavenCentral()
	maven {
	  url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
	}
    }
    dependencies {
      classpath group: 'org.homermultitext', name : 'citemgr' , version: '0.4.4'
      classpath group: 'edu.harvard.chs', name : 'cite' , version: '0.14.2'
      classpath group: 'net.sf.opencsv', name: 'opencsv', version: '2.3'
    }
}

import org.homermultitext.citemanager.DseManager
import edu.harvard.chs.cite.CiteUrn

import au.com.bytecode.opencsv.CSVReader
import groovy.xml.StreamingMarkupBuilder

import org.apache.tools.ant.filters.*

apply plugin: "base"
apply plugin:  "groovy"
apply plugin:  "maven"


apply from: "versions.gradle"


if (hasProperty('conf')) {
    System.err.println "Using configuration data from ${conf}"
    File confFile = new File(conf)
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${conf} found.")
    }
    apply from: conf

} else {
    File confFile = new File("conf.gradle")
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${conf} found.")
    }
    System.err.println "Using conf.gradle for configuration"
    apply from: "conf.gradle"
    
}



group = "org.homermultitext"
version = '0.4.0'


repositories {
    mavenCentral()
    maven {
        url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
    }
}

dependencies {
  compile group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyVersion
  compile group: 'org.homermultitext', name : 'citemgr' , version: '0.4.4'

  compile group: 'edu.harvard.chs', name : 'cite' , version: citeversion

  /*
    compile group: 'org.homermultitext', name : 'dse' , version: dseversion


    compile group: "edu.holycross.shot", name: "hocuspocus", version: hocuspocusversion
    compile group: 'edu.harvard.chs', name : 'greekutils' , version: greekutilsversion
    testCompile group: 'junit', name: 'junit', version: '4.8.2'
    compile group: 'com.thaiopensource', name:'jing', version: '20091111'
    compile group: 'net.sf.saxon', name: 'saxon-dom', version: '8.7'
    compile group: 'org.codehaus.groovy.modules.http-builder', name: 'http-builder', version: '0.5.2'	
  */
}


task chatter() {
  System.err.println "Paleography:  " + paleo  
}

task palView() {
  description = "Creates HTML page displaying paleographic inventory data."
}

palView.doLast {
  File palFile = new File(paleo)
  CSVReader reader = new CSVReader(new FileReader(palFile))

  StreamingMarkupBuilder xml = new StreamingMarkupBuilder()
  xml.encoding = "UTF-8"

  def doc = xml.bind {
    mkp.xmlDeclaration()
    reader.readAll().each { ln ->
      if (ln.size() >= 3) {
	//scholiaToTbs.append(ln[0] + ',"' + ln[2] + '"\n')
	//scholiaToImg.append(ln[0] + ',"' + ln[1] + '"\n')
      }
    }
  }
  println "XML: " + doc.toString()
}


task setUpVisInv(type: Copy) {
  from "visualinventory"
  into "${buildDir}/visualinventory"
}


task indexScholia() {
  description = "Reads inventory of scholia, and creates separate indices for surfaces and images"
}


indexScholia.doLast {
  if (!buildDir.exists()) {
    buildDir.mkdir()
  }
  File scholiaToTbs = new File(buildDir, "scholiaToTbs.csv")
  File scholiaToImg = new File(buildDir,"scholiaToImage.csv")

  scholiaInventories.split(/,/).each { inv ->

    if (inv) {
      File invFile = new File(inv)
      if (invFile) {
	CSVReader reader = new CSVReader(new FileReader(invFile))
	reader.readAll().each { ln ->
	  if (ln.size() == 3) {
	    scholiaToTbs.append(ln[0] + ',"' + ln[2] + '"\n')
	    scholiaToImg.append(ln[0] + ',"' + ln[1] + '"\n')
	  }
	}
      }
    }
  }
}


task visinv(dependsOn : [setUpVisInv, indexScholia]) {
  description = "Creates XML visual inventory for conifgured folio."
}

visinv.doLast {
  DseManager dse = new DseManager()

  folioToImage.split(/,/).each { idx ->
    if (dse.tbsImageIndexFiles) {
      dse.tbsImageIndexFiles.add(new File(idx))
    } else {
      dse.tbsImageIndexFiles = [new File(idx)]
    }
  }


  textToImage.split(/,/).each { idx ->
    if (dse.textImageIndexFiles) {
      dse.textImageIndexFiles.add(new File(idx))
    } else {
      dse.textImageIndexFiles = [new File(idx)]
    }
  }
  dse.textImageIndexFiles.add(new File(buildDir, "scholiaToImage.csv"))

  textToFolio.split(/,/).each { idx ->
    if (dse.textTbsIndexFiles) {
      dse.textTbsIndexFiles.add(new File(idx))
    } else {
      dse.textTbsIndexFiles = [new File(idx)]
    }
  }
  dse.textTbsIndexFiles.add(new File (buildDir, "scholiaToTbs.csv"))

  println "textTbs idx: " + dse.textTbsIndexFiles


  CiteUrn  img = dse.imageForTbs(folio)

  def iMaps = dse.imageMapsByText(img)

  CiteUrn urn = new CiteUrn(folio)
  String xml =  dse.getVisualInventoryXml(urn)

  String fName = "${buildDir}/visualinventory/inventory.xml"
  File visinv = new File(fName)
  visinv.setText(xml,"UTF-8")

  dse.verifyTbs(folio)

}

/*
task verify(type:  JavaExec, dependsOn: [compileGroovy, visinv, indexScholia]) {
    description = "Runs full verification suite on requested URN(s)"
    main = "org.homermultitext.mom.Verifier"
    args = [folio, folioToImage, textToImage, textToFolio, buildDir]

    classpath sourceSets.main.output.classesDir
    classpath configurations.runtime
    }*/


task verify(dependsOn: [visinv]) {
    description = "Runs full verification suite on requested URN(s)"
}

verify.doFirst {
  System.out.println "Verifying folio ${folio}\n"
}


verify.doLast {
  
  DseManager dse = new DseManager()
  dse.debug = 5

  // assing all indices
  // then
  

  System.out.println "Completed verification of ${folio}."
  System.out.println "Reports are in ${buildDir}/verification."
  System.out.println "\nMOM version: ${version}."
}
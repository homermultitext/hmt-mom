/* HMT project:  Mandatory Ongoing Maintenance.
*/

import com.github.rjeschke.txtmark.*
import org.apache.tools.ant.filters.*

buildscript {
  apply from: "versions.gradle"
    repositories {
        mavenCentral()
	maven {
	  url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
	}
    }
    dependencies {
      classpath group: 'com.github.rjeschke', name: 'txtmark', version: '0.11'


      classpath group: 'org.homermultitext', name : 'hmt-utils' , version: hmtutilsVersion

      classpath group: 'edu.harvard.chs', name : 'cite' , version: citeVersion
      classpath group: 'edu.holycross.shot', name: 'hocuspocus', version : hocuspocusVersion

      classpath group: 'edu.harvard.chs', name : 'greekutils' , version: greekutilsVersion

      classpath group : 'edu.unc.epidoc', name: 'transcoder', version : transcoderVersion

    }
}


import org.homermultitext.utils.HmtValidator


import edu.harvard.chs.cite.CiteUrn
import edu.harvard.chs.cite.CtsUrn


import org.homermultitext.citemanager.DseManager

import edu.harvard.chs.f1k.GreekNode

import edu.unc.epidoc.transcoder.TransCoder

//import au.com.bytecode.opencsv.CSVReader
import edu.holycross.shot.safecsv.SafeCsvReader




import org.apache.tools.ant.filters.*

apply plugin: "base"
apply plugin:  "groovy"

apply from: "versions.gradle"





if (hasProperty('repoconf')) {
    System.err.println "Using repository locations data from ${repoconf}"
    File confFile = new File(repoconf)
    if (! confFile.exists()) {
        throw new Exception("No file ${repoconf} found.")
    }
    apply from: repoconf

} else {
    File confFile = new File("repos.gradle")
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${confFile} found.")
    }
    System.err.println "Using repos.gradle for finding repositories."
    apply from: "repos.gradle"
}

if (hasProperty('baserepo')) {
  println "USE " + baserepo + " for repository base for DSE validation."
} else {
  //println "NO base repository configured"
}



allprojects {
  group = "org.homermultitext"
  version = "2.0.0"

  apply from: "${rootProject.rootDir}/versions.gradle"


  apply plugin: "base"
  apply plugin:  "groovy"




  task vmap << { task ->
    println "\nDependencies for ${version} in ${task.project.name}:"
    versionMap.keySet().sort().each { k ->
      print k
      Integer spaces = 15 - k.size()
      Integer idx = 0
      while(idx < spaces) {
	print " "
	idx++
	  }
      println versionMap[k]
    }
    println ""
  }
}


repositories {
    mavenCentral()
    maven {
        url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
    }
}

dependencies {
  compile group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyVersion
  compile group: 'org.homermultitext', name : 'citemgr' , version: citemgrVersion
  compile group: 'edu.harvard.chs', name : 'cite' , version: citeVersion

  compile group : 'edu.unc.epidoc', name: 'transcoder', version : transcoderVersion

  testCompile 'junit:junit:4.11'
  testCompile 'org.concordion:concordion:1.4.4'
  //testCompile group: 'junit', name: 'junit', version: junitVersion

}

/*
Corpus configureCorpus() {
  // input files:
  File archiveDir = new File(textArchive)
  File tiFile = new File(textInventory)
  File textConf = new File(textConfig)

  File schemaFile = new File(invSchema)
  Corpus corpus = new Corpus(tiFile, textConf, archiveDir) //, schemaFile)
  return corpus
}
*/
/*
task dse2(dependsOn: [indexScholia, tokenize]) {
  DseManager dse = new DseManager()

  // Populate all three corners of triangle relation:
  // 1.
  folioToImage.split(/,/).each { idx ->
    if (dse.tbsImageIndexFiles) {
      dse.tbsImageIndexFiles.add(new File(idx))
    } else {
      dse.tbsImageIndexFiles = [new File(idx)]
    }
  }

  // 2.
  // Inlcude scholia composite created by indexScholia task:
  dse.textImageIndexFiles.add(new File (buildDir, "scholiaToImage.csv"))
  // plus individual files for Iliad, other texts:
  textToImage.split(/,/).each { idx ->
    if (dse.textImageIndexFiles) {
      dse.textImageIndexFiles.add(new File(idx))
    } else {
      dse.textImageIndexFiles = [new File(idx)]
    }
  }

  // 3.
  // Include scholia composite created by indexScholia task:
  dse.textTbsIndexFiles.add(new File (buildDir, "scholiaToTbs.csv"))
  // plus individual files for Iliad, other texts:
  textToFolio.split(/,/).each { idx ->
    if (dse.textTbsIndexFiles) {
      dse.textTbsIndexFiles.add(new File(idx))
    } else {
      dse.textTbsIndexFiles = [new File(idx)]
    }
  }
}

*/
